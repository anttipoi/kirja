# Literate Programming

Literate Programming is an approach to coding where documentation and code are 
produced together from a common source. Author writes a narrative that explains
the problem and solution to reader, and in the process introduces the program.

Literate Programming was conceived by Donald Knuth and the most famous 
product built using literate programming is probably his TeX typesetting system.

Generating the actual source code is known as *tangling* and is described later.

Generating documentation from the literate programming source is called *weaving*.

## Source

Source files for Kirja are `.krj` files. They contain documentation using
Markdown markup notation. They also contain the source code embedded using
special notation with angle brackets `<<>>`.

## Weave

The process for weaving documentation produces HTML-files from sources. Each 
source file generates one HTML file.

In addition to the generated HTML the resulting site contains an index-file
(`catalog.index`), which describes the contents of the project. Most importantly
it specifies in which order the HTML files should be assembled to form a book. 

Other fixed resources for project contain the static HTML index file, CSS files 
and the Javascript which dynamically builds the site when user browses it.

<<weave>>
(defn weave
  [source-dir-name output-dir-name]
  (println (str "weave in " source-dir-name))
  (let [source-dir (File. source-dir-name)
        output-dir (File. output-dir-name)]
    (doall
     (for [source-f (source-files source-dir)]
       (weave-file source-f (output-file source-f source-dir output-dir ".html"))))
    (copy-file (File. source-dir "catalog.index")
               (File. output-dir "catalog.index"))
    (copy-resources (read-resource-names) output-dir)))
<<end>>

Weaving a single file is straightforward. File is first converted to a 
sequence of chunks,
either code or documentation. Chunks are formatted as markdown and then 
converted to HTML and finally written out.

The chunking process (function `chunk-stream`) is described later in more detail.

<<weave-file>>
(defn- weave-file
  [source-file output-file]
  (println (str "weaving... " (.getName source-file) " into " (.getName output-file)))
  (with-open [in-reader (io/reader source-file)
              out-writer (io/writer output-file)]
    (let [chunks (chunk-stream (line-seq in-reader))
          doc-converted (str/join "\n" (convert-code-chunks chunks))
          mdp (MarkdownProcessor.)]
      (.write out-writer (.markdown mdp doc-converted)))))
<<end>>

Conversion of chunks is simple. Documentation chunks are already in Markdown notation and 
they are printed as such. Code chunks are indented, which in Markdown results in 
block quote style.

Note the chunk representation in code. 
A chunk is a map with key `type` either `doc` or `code` 
and `body` containing a sequence of lines. Code chunks also have a `name`.

<<converting>>
(defn chunk-to-md
  [{:keys [type name body]}]
  (if (= type :doc)
    (str/join "\n" body)
    (str/join "\n" (concat
                    [(str "    <<" name ">>")]
                    (map #(str "    " %) body)
                    ["    <<end>>"]))))

(defn convert-code-chunks
  [chunks]
  (map chunk-to-md chunks))
<<end>>

Resources are read from the classpath and copied in the documentation directory.
Since classpath does not really provide for browsing, resources must be 
explicitly listed in a fixed-name resource, called `resources-list`.

<<resource-copy>>
(defn read-resource-names
  "returns resource name vector from resource-list file on classpath"
  []
  (with-resource-stream [st "resources-list"]
    (read (PushbackReader. (io/reader st)))))

(defn copy-resources
  [resource-names output-dir]
  (println "copying resources ")
  (for [r resource-names]
    (copy-resource r (File. output-dir r))))
<<end>>

The structure of the file is always listed under the `<<main>>` chunk. 
The code expansion (tangling) works by expanding this section. All other 
code in this files must be included using the `<<include >>` tags.

<<main>>
(ns kirja.weave
  (:use [kirja.common :only [source-files
                             chunk-stream
                             output-file]]
        [kirja.util :only [ensure-parent-directories-exist
                           with-resource-stream
                           copy-resource
                           copy-file]])
  (:require [clojure.java.io :as io]
            [clojure.string :as str])
  (:import [java.io File PushbackReader]
           [com.petebevin.markdown MarkdownProcessor]))
<<include converting>>
<<include weave-file>>
<<include resource-copy>>
<<include weave>>
<<end>>